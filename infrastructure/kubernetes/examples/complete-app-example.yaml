# Complete Example Application
# This example demonstrates:
# - Deployment with resource limits
# - Service creation
# - Ingress with TLS (cert-manager + Let's Encrypt)
# - DNS automation (external-dns)
# - Secrets mounting (AWS Secrets Manager CSI Driver)
# - Monitoring annotations (Prometheus)

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: demo-app
  labels:
    name: demo-app
    tier: app
    monitoring: enabled

---
# ServiceAccount for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-app
  namespace: demo-app
  annotations:
    eks.amazonaws.com/role-arn: ${DEMO_APP_ROLE_ARN}

---
# SecretProviderClass to mount secrets from AWS Secrets Manager
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: demo-app-secrets
  namespace: demo-app
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "demo-app/database"
        objectType: "secretsmanager"
        objectAlias: "db-credentials"
      - objectName: "demo-app/api-keys"
        objectType: "secretsmanager"
        objectAlias: "api-keys"
  secretObjects:
    - secretName: demo-app-secrets
      type: Opaque
      data:
        - objectName: "db-credentials"
          key: database.json
        - objectName: "api-keys"
          key: apikeys.json

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-app-config
  namespace: demo-app
data:
  app.conf: |
    server {
      listen 8080;
      server_name _;
      location / {
        return 200 'Hello from Kubernetes Platform!\n';
        add_header Content-Type text/plain;
      }
      location /health {
        return 200 'healthy\n';
        add_header Content-Type text/plain;
      }
      location /metrics {
        stub_status on;
      }
    }

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  namespace: demo-app
  labels:
    app: demo-app
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: demo-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: nginx
          image: nginx:1.25-alpine
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d
            - name: secrets
              mountPath: /mnt/secrets
              readOnly: true
          env:
            - name: APP_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
      volumes:
        - name: config
          configMap:
            name: demo-app-config
        - name: secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "demo-app-secrets"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - demo-app
                topologyKey: kubernetes.io/hostname

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: demo-app
  namespace: demo-app
  labels:
    app: demo-app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  selector:
    app: demo-app
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-app
  namespace: demo-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: demo-app
  namespace: demo-app
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: demo-app

---
# Ingress with TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-app
  namespace: demo-app
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/success-codes: '200'
    
    # cert-manager for TLS
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
    # external-dns for Route53
    external-dns.alpha.kubernetes.io/hostname: demo-app.${PUBLIC_HOSTED_ZONE}
    
    # Security headers
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
spec:
  tls:
    - hosts:
        - demo-app.${PUBLIC_HOSTED_ZONE}
      secretName: demo-app-tls
  rules:
    - host: demo-app.${PUBLIC_HOSTED_ZONE}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: demo-app
                port:
                  number: 80

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: demo-app
  namespace: demo-app
  labels:
    app: demo-app
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app: demo-app
  endpoints:
    - port: http
      path: /metrics
      interval: 30s

---
# NetworkPolicy to restrict traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: demo-app
  namespace: demo-app
spec:
  podSelector:
    matchLabels:
      app: demo-app
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-system
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
