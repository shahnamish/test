"""Vulnerability scanning coordination service."""

from __future__ import annotations

import json
import logging
import subprocess
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from .alerting import AlertDispatcher


@dataclass
class VulnerabilityFinding:
    id: str
    severity: str
    description: str
    target: str
    recommendation: str


class VulnerabilityScanner:
    """Orchestrates vulnerability scanning across multiple tools."""

    def __init__(self, alert_dispatcher: Optional[AlertDispatcher] = None) -> None:
        self.logger = logging.getLogger("vulnerability")
        self.alert_dispatcher = alert_dispatcher or AlertDispatcher()
        self.scanners = {
            "trivy": self._run_trivy,
            "bandit": self._run_bandit,
            "safety": self._run_safety,
        }

    def run_all(self) -> List[VulnerabilityFinding]:
        findings: List[VulnerabilityFinding] = []
        for name, scanner in self.scanners.items():
            try:
                self.logger.info("Running scanner: %s", name)
                findings.extend(scanner())
            except Exception as exc:  # pragma: no cover - subprocess errors
                self.logger.exception("Scanner %s failed: %s", name, exc)
        self._handle_alerts(findings)
        return findings

    def _run_trivy(self) -> List[VulnerabilityFinding]:
        command = ["trivy", "fs", "--format", "json", "./"]
        result = self._execute(command, tool="trivy")
        return self._parse_trivy_results(result)

    def _run_bandit(self) -> List[VulnerabilityFinding]:
        command = ["bandit", "-r", "services", "-f", "json"]
        result = self._execute(command, tool="bandit")
        return self._parse_bandit_results(result)

    def _run_safety(self) -> List[VulnerabilityFinding]:
        command = ["safety", "check", "--full-report", "--json"]
        result = self._execute(command, tool="safety")
        return self._parse_safety_results(result)

    def _execute(self, command: List[str], tool: str) -> str:
        self.logger.debug("Executing command: %s", " ".join(command))
        try:
            completed = subprocess.run(
                command,
                check=False,
                capture_output=True,
                text=True,
            )
        except FileNotFoundError:  # pragma: no cover - tool not installed
            self.logger.warning("Tool %s not installed; skipping.", tool)
            return ""

        if completed.returncode not in (0, 1):  # 1 indicates findings for some tools
            self.logger.error(
                "Tool %s failed with code %s: %s",
                tool,
                completed.returncode,
                completed.stderr,
            )
            return ""
        return completed.stdout

    def _parse_trivy_results(self, output: str) -> List[VulnerabilityFinding]:
        findings: List[VulnerabilityFinding] = []
        if not output:
            return findings

        try:
            data = json.loads(output)
        except json.JSONDecodeError:
            self.logger.error("Invalid JSON from Trivy")
            return findings

        for result in data:
            vulnerabilities = result.get("Vulnerabilities", [])
            target = result.get("Target", "unknown")
            for vuln in vulnerabilities:
                findings.append(
                    VulnerabilityFinding(
                        id=vuln.get("VulnerabilityID", "unknown"),
                        severity=vuln.get("Severity", "UNKNOWN"),
                        description=vuln.get("Description", ""),
                        target=target,
                        recommendation=vuln.get("PrimaryURL", ""),
                    )
                )
        return findings

    def _parse_bandit_results(self, output: str) -> List[VulnerabilityFinding]:
        findings: List[VulnerabilityFinding] = []
        if not output:
            return findings

        data = json.loads(output)
        for result in data.get("results", []):
            findings.append(
                VulnerabilityFinding(
                    id=result.get("test_id", "B000"),
                    severity=result.get("issue_severity", "MEDIUM"),
                    description=result.get("issue_text", ""),
                    target=result.get("filename", ""),
                    recommendation=result.get("more_info", ""),
                )
            )
        return findings

    def _parse_safety_results(self, output: str) -> List[VulnerabilityFinding]:
        findings: List[VulnerabilityFinding] = []
        if not output:
            return findings

        data = json.loads(output)
        for vuln in data.get("vulnerabilities", []):
            findings.append(
                VulnerabilityFinding(
                    id=vuln.get("advisory", ""),
                    severity=vuln.get("severity", "MEDIUM"),
                    description=vuln.get("description", ""),
                    target=vuln.get("package_name", ""),
                    recommendation=vuln.get("recommendation", ""),
                )
            )
        return findings

    def _handle_alerts(self, findings: List[VulnerabilityFinding]) -> None:
        high_or_critical = [finding for finding in findings if finding.severity.upper() in {"HIGH", "CRITICAL"}]
        if high_or_critical:
            self.alert_dispatcher.dispatch_vulnerability_alerts(high_or_critical)

        report_path = Path("reports")
        report_path.mkdir(exist_ok=True)
        report_file = report_path / "vulnerability_report.json"
        with report_file.open("w", encoding="utf-8") as f:
            json.dump([finding.__dict__ for finding in findings], f, indent=2)
        self.logger.info("Vulnerability report saved to %s", report_file)
