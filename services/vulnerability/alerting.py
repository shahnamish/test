"""Vulnerability alerting module."""

from __future__ import annotations

import logging
from typing import TYPE_CHECKING, List

if TYPE_CHECKING:
    from .scanner import VulnerabilityFinding


class AlertDispatcher:
    """Dispatch vulnerability alerts to various channels."""

    def __init__(self) -> None:
        self.logger = logging.getLogger("vulnerability")

    def dispatch_vulnerability_alerts(self, findings: List[VulnerabilityFinding]) -> None:
        critical_count = sum(1 for f in findings if f.severity.upper() == "CRITICAL")
        high_count = sum(1 for f in findings if f.severity.upper() == "HIGH")

        message = (
            f"Vulnerability scan completed: {critical_count} critical, {high_count} high severity findings. "
            "Please review the vulnerability report."
        )
        self.logger.warning(message)

        self._send_email_alert(message)
        self._send_slack_alert(message)
        self._send_pagerduty_alert(critical_count, high_count)

    def _send_email_alert(self, message: str) -> None:
        """Send email alert."""
        self.logger.info("Email alert: %s", message)

    def _send_slack_alert(self, message: str) -> None:
        """Send Slack alert."""
        self.logger.info("Slack alert: %s", message)

    def _send_pagerduty_alert(self, critical_count: int, high_count: int) -> None:
        """Send PagerDuty alert if critical vulnerabilities found."""
        if critical_count > 0:
            self.logger.critical("PagerDuty alert: %d critical vulnerabilities", critical_count)
